#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*
#define MAX(a,b)((a)>(b)?(a):(b))
#define MAX_DEGREE 101

typedef int element;
typedef struct {
 int degree;
 float coef[MAX_DEGREE];
}polynomial;

polynomial add(polynomial A, polynomial B) {
 int Bpos=0, Apos=0, Cpos = 0;
 polynomial C;
 int degree_a = A.degree;
 int degree_b = B.degree;
 C.degree = MAX(A.degree, B.degree);

 while (Apos <= A.degree&&Bpos <= B.degree) {
  if (degree_a > degree_b) {
   C.coef[Cpos++] = A.coef[Apos++];
   A.degree--;
  }
  else if (degree_a == degree_b) {
   C.coef[Cpos++] = A.coef[Apos++] + B.coef[Bpos++];
   A.degree--;
   B.degree--;
  }
  else {
   C.coef[Cpos++] = B.coef[Bpos++];
   B.degree--;
  }
 }

 return C;


}

int main(void) {

 polynomial A = { 5,{3,6,0,0,0,10} };
 polynomial B = { 4,{7,0,5,0,1} };

 polynomial C;
 C = add(A, B);


}

*/

/*

#define MAX 101
struct {
 float coef;
 int expon;
}terms[MAX] = { {8,3},{7,1},{1,0},{10,3},{3,2},{1,0} };

int avail = 6;

char compare(int a, int b) {
 if (a > b)return '>';
 else if (a == b)return'=';
 else return '<';
}

void attach(float coef, int expon) {
 if (avail > MAX)printf("오류\n");
 terms[avail].coef = coef;
 terms[avail++].expon = expon;

}


void poly_add(int As, int Ae, int Bs, int Be, int *Cs, int *Ce) {

 float tempcoef;
 *Cs = avail;
 while (As <= Ae&&Bs <= Be) {
  switch (compare(terms[As].expon, terms[Bs].expon)) {
  case '>':
   attach(terms[As].coef, terms[As].expon);
   As++; break;
  case '=':
   attach(terms[As].coef+terms[Bs].coef, terms[As].expon+terms[Bs].expon);
   As++; Bs++; break;
  case '<':
   attach(terms[Bs].coef, terms[Bs].expon);
   Bs++; break;

  }

  for (; As <= Ae; As++)
   attach(terms[As].coef, terms[As].expon);
  for(;Bs<=Be;Bs++)
   attach(terms[Bs].coef, terms[Bs].expon);

 }
 *Ce = avail-1;
}

*/

#define ROWS 3
#define COLS 3

/*
void sparse_matrix_add1(int A[ROWS][COLS], int B[ROWS][COLS], int C[ROWS][COLS]) {
 int r, c;
 for (r = 0; r < ROWS; r++)
  for (c = 0; c < COLS; c++)
   C[r][c] = A[r][c] + B[r][c];

}
*/


/*

#define MAX 10

typedef struct {
 int row;
 int col;
 int value;
}element;

typedef struct SparseMatrix {
 element data[MAX];
 int rows;
 int cols;
 int terms;
}SparseMatrix;

SparseMatrix add2(SparseMatrix a, SparseMatrix b) {
 SparseMatrix c;
 int ca = 0, cb = 0, cc = 0;
 if(a.rows != b.rows || a.cols != b.cols)
  printf("에러\n");
 
 c.rows = a.rows;
 c.cols = a.cols;
 c.terms = 0;

 while (ca <= a.terms&&cb < b.terms) {

  int inda = a.data[ca].row*a.cols + a.data[ca].col;
  int indb = b.data[cb].row*b.cols + b.data[ca].col;
  if (inda < indb) {
   c.data[cc++] = a.data[ca++];
  }
  else if (inda == indb) {
   if (a.data[ca].value + b.data[cb].value != 0) {
    c.data[cc].row = a.data[ca].row;
    c.data[cc].col = a.data[ca].col;
    c.data[cc++].value = a.data[ca++].value + b.data[cb++].value;

   }
   else {
    ca++; cb++;
   }

  }
  else
   c.data[cc++] = b.data[cb++];

 }

 for (; ca < a.terms;ca++)
  c.data[cc++] = a.data[ca++];
 for (;cb < b.terms; cb++)
  c.data[cb++] = b.data[cb++];
 c.terms = cc;
 return c;
}


*/

 


/*
 리스트: 집합과는 달리 항목들간 순서가 있다 
 배열로 구현된 리스트: 순차적 표현 (순차적으로 공간이 할당 ), 같은 형의 변수를 여러개 만드는 경우 사용된다

 

*/

/*

#define MAX 100

typedef int element;
typedef struct {
 element list[MAX];
 int length;
}ArraytypeList;

void init(ArraytypeList *L) {
 L->length = 0;
}

int is_empty(ArraytypeList *L) {
 return L->length == 0;
}


int is_full(ArraytypeList *L) {
 return L->length == MAX;
}

void display(ArraytypeList *L) {

 for (int i = 0; i < L->length; i++)
  printf("%d\n ", L->list[i]);
}

void add(ArraytypeList *L, int pos, element item) {
 if (!is_full(L) && (pos >= 0) && pos <= L->length)
 {
  int i;
  for (i = L->length - 1; i >= pos; i--)
   L->list[i + 1] = L->list[i];
  L->list[pos] = item;
  L->length++;

 }
}

element delete_array(ArraytypeList *L, int pos) {

 element item;
 if (pos < 0 || pos >= L->length)printf("위치오류\n");
 item = L->list[pos];
 for (int i = pos; i < L->length-1; i++)
  L->list[i] = L->list[i + 1];
 L->length--;
 return item;

}


int get_length(ArraytypeList *L) {
 return L->length;
}


element get_array(ArraytypeList *L,int pos) {
 return L->list[pos];
}

int is_in_list(ArraytypeList *L, element item) {
 for (int i = 0; i < L->length; i++) {
  if (L->list[i] == item)return 1;
 }
 return 0;
}

void replace(ArraytypeList *L, int pos, element item) {
 L->list[pos] = item;
}

void clear(ArraytypeList *L) {
 L->length = 0;
}

*/


/*
배열: 구현이 간단하다, 크기가 고정된다 
데이터 추가, 삭제시 기존의 데이터들을 이동시켜야 된다

연결리스트: 데이터 이동할  필요 없이 링크만 변경 
데이터 저장할 공간 동적으로 추가 가능 
상대적으로 구현이 어렵고 오류가 발생하기 쉽다 
노드들은 메모리 상의 어떤 곳에나 위치할 수 있다 
연속적인 기억공간 필요없다 

링크필드를 위한 추가 공간이 필요하고 연산의 구현이나 사용방법이 배열에 비해 복잡하여 
오류가 발생할 가능성이 높아진다 

*/

/*

typedef int element;
typedef struct ListNode {
 element data;
 struct ListNode* link;
}ListNode;

void insert_node(ListNode **phead, ListNode *p, ListNode *new_node) {
 if (*phead == NULL) {
  new_node->link = NULL;
  *phead = new_node;
 }
 else if (p == NULL) {
  new_node->link = *phead;
  *phead = new_node;
 }
 else {
  new_node->link = p->link;
  p->link = new_node;
 }

}

void remove_node(ListNode **phead, ListNode *p, ListNode *removed) {

 if (p == NULL)
  *phead = (*phead)->link;
 else
  p->link = removed->link;

 free(removed);

}

void display(ListNode *head) {
 ListNode *p = head;
 while (p != NULL) {
  printf("%d->", p);
  p = p->link;
 }
 printf("\n");

}

ListNode *search(ListNode *head, int x) {
 ListNode *p = head;
 while (p != NULL) {
  if (p->data == x)return p;
  p = p->link;
 }
 return p;
}


ListNode *concat(ListNode *head1, ListNode *head2) {
 ListNode *p;
 if (head1 == NULL)return head2;
 else if (head2 == NULL)return head1;
 else {
  p = head1;
  while (p->link != NULL) {
   p = p->link;
  }
  p->link = head2;
  return head1;
 }
 

}


ListNode *reverse(ListNode *head) {

 ListNode *p, *q, *r;
 p = head;
 q = NULL;
 while (p != NULL) {
  r = q;
  q = p;
  p = p->link;
  q->link = r;
 }
 return q;

}

ListNode *create_node(element data, ListNode *link) {
 ListNode *new_node;
 new_node = (ListNode*)malloc(sizeof(ListNode));
 new_node->data = data;
 new_node->link = link;
 return (new_node);
}

*/

/*
int inputstr_retlen(char str[]) {
 printf("문자열 입력:");
 gets_s(str);
 return strlen(str);
}

int main() {


 char str[5][80];
 int i, j;
 int len, max = 0;
 int sum[80] = { 0 };

 for (i = 0; i < 5; i++) {
  printf("문자열입력: ");
  gets_s(str[i]);
  len = strlen(str[i]);
  if (len > max)max = len;
 }

 for (j = 0; j < max; j++) {
  for (i = 0; i < 5; i++) {
   if (str[i][j] >= '0'&&str[i][j] <= '9') {
    int num = (str[i][j] - '0');
    sum[j] += num;
   }
  }
 }

 printf("각 열별 숫자의 합\n");
 for (int i = 0; i < max; i++)
  printf("%3d", sum[i]);

 inputstr_retlen(str[5]);
}

*/


 
